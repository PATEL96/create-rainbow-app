name: Create Release and Publish to npm

on:
    workflow_dispatch:
        inputs:
            version_type:
                description: "Version bump type"
                required: true
                default: "patch"
                type: choice
                options:
                    - patch
                    - minor
                    - major
            release_notes:
                description: "Release notes"
                required: false
                type: string

jobs:
    release:
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Git User
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
                  registry-url: "https://registry.npmjs.org/"

            - name: Install dependencies
              run: npm ci || npm install

            - name: Get current version
              id: current_version
              run: |
                  # Display current version
                  CURRENT_VERSION=$(node -e "console.log(require('./package.json').version);")
                  echo "Current version: $CURRENT_VERSION"
                  echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

            - name: Bump version initially
              id: initial_bump
              run: |
                  # Bump version using npm version command
                  npm version ${{ github.event.inputs.version_type }} --no-git-tag-version

                  # Get the new version
                  NEW_VERSION=$(node -e "console.log(require('./package.json').version);")
                  echo "Initial bump to version: $NEW_VERSION"
                  echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

            - name: Check for existing tags and handle conflicts
              id: check_tag
              run: |
                  # Check if the tag already exists
                  TAG_EXISTS=$(git ls-remote --tags origin refs/tags/v${{ steps.initial_bump.outputs.version }} | wc -l)
                  echo "Tag check result: $TAG_EXISTS"

                  if [ "$TAG_EXISTS" -gt "0" ]; then
                    echo "Tag v${{ steps.initial_bump.outputs.version }} already exists, trying to find a unique version"

                    # Try up to 10 patch versions to find an unused one
                    CURRENT_VERSION="${{ steps.initial_bump.outputs.version }}"
                    UNIQUE_VERSION=""

                    for i in {1..10}; do
                      # Bump the patch version
                      npm version patch --no-git-tag-version
                      CANDIDATE_VERSION=$(node -e "console.log(require('./package.json').version);")
                      echo "Trying version: $CANDIDATE_VERSION"

                      # Check if this tag exists
                      CANDIDATE_EXISTS=$(git ls-remote --tags origin refs/tags/v$CANDIDATE_VERSION | wc -l)

                      if [ "$CANDIDATE_EXISTS" -eq "0" ]; then
                        UNIQUE_VERSION="$CANDIDATE_VERSION"
                        echo "Found unique version: $UNIQUE_VERSION"
                        break
                      fi
                    done

                    if [ -z "$UNIQUE_VERSION" ]; then
                      echo "::error::Failed to find a unique version after 10 attempts"
                      exit 1
                    fi

                    echo "final_version=$UNIQUE_VERSION" >> $GITHUB_OUTPUT
                  else
                    echo "Tag v${{ steps.initial_bump.outputs.version }} does not exist"
                    echo "final_version=${{ steps.initial_bump.outputs.version }}" >> $GITHUB_OUTPUT
                  fi

            - name: Display Final Version
              run: echo "Final version to be published - ${{ steps.check_tag.outputs.final_version }}"

            - name: Commit version bump
              run: |
                  git add package.json
                  git commit -m "Bump version to ${{ steps.check_tag.outputs.final_version }}"
                  git push

            - name: Create Git Tag
              run: |
                  # Create and push the tag with force to ensure it's created/updated
                  git tag -f v${{ steps.check_tag.outputs.final_version }}
                  git push origin v${{ steps.check_tag.outputs.final_version }} --force
                  echo "Created tag: v${{ steps.check_tag.outputs.final_version }}"

            - name: Create GitHub Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ steps.check_tag.outputs.final_version }}
                  release_name: Release v${{ steps.check_tag.outputs.final_version }}
                  body: |
                      # Version ${{ steps.check_tag.outputs.final_version }}

                      ${{ github.event.inputs.release_notes || 'No release notes provided.' }}
